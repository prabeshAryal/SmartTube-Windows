plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.14'
    id 'org.beryx.runtime' version '1.13.1'
}

group = 'com.liskovsoft.smarttube'
version = '1.0.0'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

javafx {
    version = '19'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media', 'javafx.web']
}

dependencies {
    // JavaFX
    implementation 'org.openjfx:javafx-controls:19'
    implementation 'org.openjfx:javafx-fxml:19'
    implementation 'org.openjfx:javafx-media:19'
    implementation 'org.openjfx:javafx-web:19'
    
    // Media libraries
    implementation 'uk.co.caprica:vlcj:4.8.2'
    implementation 'net.java.dev.jna:jna:5.13.0'
    implementation 'net.java.dev.jna:jna-platform:5.13.0'
    
    // HTTP client for YouTube API
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    
    // JSON processing
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
      // YouTube extraction library
    implementation 'com.github.TeamNewPipe:NewPipeExtractor:v0.23.1'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.mockito:mockito-core:5.1.1'
}

application {
    mainClass = 'com.liskovsoft.smarttube.desktop.SmartTubeApplication'
}

// Configure distribution tasks to handle duplicates
tasks.withType(Tar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

runtime {
    launcher {
        noConsole = true
    }
    jpackage {
        imageOptions = ['--icon', 'src/main/resources/images/app-icon.ico']
        installerOptions = ['--win-dir-chooser', '--win-menu', '--win-shortcut']
        installerType = 'msi'
        installerName = 'SmartTube-Desktop'
    }
}

jar {
    manifest {
        attributes(
            'Implementation-Title': 'SmartTube Desktop',
            'Implementation-Version': project.version,
            'Main-Class': 'com.liskovsoft.smarttube.desktop.SmartTubeApplication'
        )
    }
}

// Create distribution with all dependencies
tasks.register('createDistribution', Copy) {
    dependsOn jar
    from configurations.runtimeClasspath
    from jar.archiveFile
    into layout.buildDirectory.dir('distribution/lib')
}

// Create Windows batch script
tasks.register('createWindowsScript') {
    dependsOn createDistribution
    doLast {
        def scriptFile = layout.buildDirectory.file('distribution/SmartTube.bat').get().asFile
        scriptFile.parentFile.mkdirs()
        scriptFile.text = """@echo off
set JAVA_OPTS=-Xmx2g -Djava.library.path="C:\\Users\\prabe\\scoop\\shims"
java %JAVA_OPTS% -cp "lib\\*" com.liskovsoft.smarttube.desktop.SmartTubeApplication %*
"""
    }
}

// Task to build everything
tasks.register('buildDesktopApp') {
    dependsOn createDistribution, createWindowsScript
    group = 'distribution'
    description = 'Creates a complete distribution for Windows'
}

test {
    useJUnitPlatform()
}
